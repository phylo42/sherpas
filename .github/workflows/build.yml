name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:

    name: ${{matrix.buildname}}

    runs-on: ${{matrix.os}}

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-20.04, ubuntu-18.04, macos-10.15, macos-11.0 ]
        include:
          - os: ubuntu-20.04
            buildname: 'ubuntu-20.04'
            triplet: x64-linux
            compiler: gcc_64
          - os: ubuntu-18.04
            buildname: 'ubuntu-18.04'
            triplet: x64-linux
            compiler: gcc_64
          - os: macos-10.15
            buildname: 'macos-10.15'
            triplet: x64-osx
            compiler: clang_64
          - os: macos-11.0
            buildname: 'macos-11.0'
            triplet: x64-osx
            compiler: clang_64
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: (MacOS) Install dependencies
      if: runner.os == 'macOS'
      run: brew install boost

    - name: (Linux) Install dependencies
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install -yq libboost-dev libboost-serialization-dev libboost-filesystem-dev libboost-iostreams-dev

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE --target SHERPAS

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: sherpas/SHERPAS -h
